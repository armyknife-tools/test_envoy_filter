# Enhanced Automated Traffic Capture Solution with Istio Integration
# Combines simplicity with Istio sidecar support for production environments
# NOTE: Assumes namespace 'perf-test-app-sbx' already exists with Istio injection enabled
---
# First, enable Istio injection for the namespace (if not already done)
apiVersion: v1
kind: Namespace
metadata:
  name: perf-test-app-sbx
  labels:
    istio-injection: enabled
---
# Collector Service that receives captured traffic data (NO SIDECAR)
apiVersion: v1
kind: Service
metadata:
  name: traffic-collector
  namespace: perf-test-app-sbx
spec:
  ports:
  - port: 9000
    targetPort: 9000
    name: http
  selector:
    app: traffic-collector
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traffic-collector
  namespace: perf-test-app-sbx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traffic-collector
  template:
    metadata:
      labels:
        app: traffic-collector
        sidecar.istio.io/inject: "false"  # NO SIDECAR for collector
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: collector
        image: node:16-alpine
        command: ["/bin/sh"]
        args:
        - -c
        - |
          mkdir -p /app /data
          cat > /app/collector.js << 'EOF'
          const http = require('http');
          const fs = require('fs');
          
          // In-memory storage (replace with database for production)
          const captures = [];
          const MAX_CAPTURES = 10000;
          
          const server = http.createServer((req, res) => {
            if (req.method === 'POST' && req.url === '/collect') {
              let body = '';
              req.on('data', chunk => body += chunk);
              req.on('end', () => {
                try {
                  const data = JSON.parse(body);
                  
                  // Add to memory store
                  captures.push(data);
                  if (captures.length > MAX_CAPTURES) {
                    captures.shift(); // Remove oldest
                  }
                  
                  // Log summary
                  console.log('[COLLECTED]', JSON.stringify({
                    timestamp: new Date().toISOString(),
                    source: data.source,
                    destination: data.destination,
                    method: data.request.method,
                    url: data.request.url,
                    status: data.response.status,
                    duration_ms: data.response.duration_ms,
                    headers_count: Object.keys(data.request.headers).length,
                    body_size: data.request.body ? data.request.body.length : 0
                  }));
                  
                  // Append to file for persistence
                  fs.appendFileSync('/data/captures.jsonl', JSON.stringify(data) + '\n');
                  
                  res.writeHead(200, { 'Content-Type': 'application/json' });
                  res.end(JSON.stringify({ status: 'collected', id: Date.now() }));
                } catch (e) {
                  console.error('Invalid JSON:', e);
                  res.writeHead(400);
                  res.end('Invalid JSON');
                }
              });
            } else if (req.method === 'GET' && req.url === '/health') {
              res.writeHead(200);
              res.end('OK');
            } else if (req.method === 'GET' && req.url.startsWith('/query')) {
              // Return last N captures
              const url = new URL(req.url, 'http://localhost');
              const limit = parseInt(url.searchParams.get('limit') || '10');
              const offset = parseInt(url.searchParams.get('offset') || '0');
              
              const results = captures.slice(-limit - offset, -offset || undefined);
              
              res.writeHead(200, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify(results, null, 2));
            } else if (req.method === 'GET' && req.url === '/stats') {
              // Return statistics
              const stats = {
                total_captures: captures.length,
                methods: {},
                status_codes: {},
                services: {}
              };
              
              captures.forEach(capture => {
                // Count methods
                stats.methods[capture.request.method] = (stats.methods[capture.request.method] || 0) + 1;
                
                // Count status codes
                stats.status_codes[capture.response.status] = (stats.status_codes[capture.response.status] || 0) + 1;
                
                // Count services
                stats.services[capture.destination.service] = (stats.services[capture.destination.service] || 0) + 1;
              });
              
              res.writeHead(200, { 'Content-Type': 'application/json' });
              res.end(JSON.stringify(stats, null, 2));
            } else {
              res.writeHead(404);
              res.end('Not Found');
            }
          });
          
          // Load existing captures on startup
          try {
            if (fs.existsSync('/data/captures.jsonl')) {
              const lines = fs.readFileSync('/data/captures.jsonl', 'utf8').split('\n');
              lines.forEach(line => {
                if (line.trim()) {
                  try {
                    captures.push(JSON.parse(line));
                  } catch (e) {
                    console.error('Failed to parse line:', e);
                  }
                }
              });
              console.log('Loaded ' + captures.length + ' existing captures');
            }
          } catch (e) {
            console.error('Failed to load captures:', e);
          }
          
          server.listen(9000, () => {
            console.log('Traffic Collector listening on :9000');
            console.log('POST /collect - Submit captured data');
            console.log('GET /query?limit=N&offset=N - View captures');
            console.log('GET /stats - View statistics');
            console.log('GET /health - Health check');
          });
          EOF
          
          node /app/collector.js
        ports:
        - containerPort: 9000
        volumeMounts:
        - name: data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "50m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: data
        emptyDir: {}
---
# Enhanced Proxy with Collector Integration and Istio Support (NO SIDECAR)
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-config
  namespace: perf-test-app-sbx
data:
  sampling_rate: "1.0"  # 100% capture for demo/testing
  # For production, reduce sampling rate:
  # - Testing: "0.1" (10% - easy verification with ~10 requests)
  # - Low traffic: "0.01" (1%)
  # - Medium traffic: "0.001" (0.1%)
  # - High traffic: "0.0001" (0.01%)
  # To update: kubectl edit configmap proxy-config -n YOUR_NAMESPACE
  # Then restart: kubectl rollout restart deployment passthrough-proxy -n YOUR_NAMESPACE
  collector_url: "http://traffic-collector:9000/collect"
  max_body_size: "8192"
  mask_sensitive_data: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-code
  namespace: perf-test-app-sbx
data:
  server.js: |
    const http = require('http');
    const cluster = require('cluster');
    const os = require('os');
    
    const CONFIG = {
      PORT: 8080,
      HEALTH_PORT: 8081,
      SAMPLING_RATE: parseFloat(process.env.SAMPLING_RATE || '1.0'),
      COLLECTOR_URL: process.env.COLLECTOR_URL || 'http://traffic-collector:9000/collect',
      MAX_BODY_SIZE: parseInt(process.env.MAX_BODY_SIZE || '8192'),
      MASK_SENSITIVE: process.env.MASK_SENSITIVE_DATA === 'true',
      LOG_LEVEL: process.env.LOG_LEVEL || 'info',
      NODE_NAME: process.env.NODE_NAME || 'unknown',
      POD_NAME: process.env.POD_NAME || 'unknown',
      NAMESPACE: process.env.NAMESPACE || 'perf-test-app-sbx'
    };
    
    // Enhanced sensitive data masking patterns
    const SENSITIVE_PATTERNS = [
      { pattern: /\b\d{3}-\d{2}-\d{4}\b/g, replacement: '[SSN-MASKED]' },
      { pattern: /\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b/g, replacement: '[CC-MASKED]' },
      { pattern: /\b\d{4}[\s-]?\d{6}[\s-]?\d{5}\b/g, replacement: '[CC-MASKED]' },
      { pattern: /"password"\s*:\s*"[^"]+"/gi, replacement: '"password":"[MASKED]"' },
      { pattern: /"passwd"\s*:\s*"[^"]+"/gi, replacement: '"passwd":"[MASKED]"' },
      { pattern: /"token"\s*:\s*"[^"]+"/gi, replacement: '"token":"[MASKED]"' },
      { pattern: /"api_key"\s*:\s*"[^"]+"/gi, replacement: '"api_key":"[MASKED]"' },
      { pattern: /"apikey"\s*:\s*"[^"]+"/gi, replacement: '"apikey":"[MASKED]"' },
      { pattern: /"secret"\s*:\s*"[^"]+"/gi, replacement: '"secret":"[MASKED]"' },
      { pattern: /Bearer\s+[A-Za-z0-9\-_\.]+/g, replacement: 'Bearer [TOKEN-MASKED]' },
      { pattern: /Basic\s+[A-Za-z0-9\+\/]+=*/g, replacement: 'Basic [BASIC-MASKED]' },
      { pattern: /([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)/g, replacement: '[EMAIL-MASKED]' }
    ];
    
    const SENSITIVE_HEADERS = [
      'authorization', 'cookie', 'x-api-key', 'x-auth-token', 
      'x-access-token', 'x-secret-key', 'api-key', 'auth-token'
    ];
    
    // Istio-specific headers to preserve/handle
    const ISTIO_HEADERS = [
      'x-forwarded-for', 'x-forwarded-proto', 'x-envoy-original-path',
      'x-b3-traceid', 'x-b3-spanid', 'x-b3-parentspanid', 'x-b3-sampled',
      'x-request-id', 'x-envoy-decorator-operation', 'x-original-host'
    ];
    
    if (cluster.isMaster) {
      const numCPUs = 2; // Reduced for low resource environments
      console.log('Master starting ' + numCPUs + ' workers');
      
      for (let i = 0; i < numCPUs; i++) {
        cluster.fork();
      }
      
      cluster.on('exit', (worker, code, signal) => {
        console.log('Worker ' + worker.process.pid + ' died');
        cluster.fork();
      });
      
      return;
    }
    
    // Worker process
    console.log('[Worker ' + process.pid + '] Starting with sampling rate: ' + CONFIG.SAMPLING_RATE);
    
    function maskSensitiveData(text) {
      if (!CONFIG.MASK_SENSITIVE || typeof text !== 'string') return text;
      
      let masked = text;
      for (const rule of SENSITIVE_PATTERNS) {
        masked = masked.replace(rule.pattern, rule.replacement);
      }
      return masked;
    }
    
    function maskHeaders(headers) {
      if (!CONFIG.MASK_SENSITIVE) return headers;
      
      const masked = Object.assign({}, headers);
      for (const header of SENSITIVE_HEADERS) {
        const lowerHeader = header.toLowerCase();
        Object.keys(masked).forEach(key => {
          if (key.toLowerCase() === lowerHeader) {
            masked[key] = '[HEADER-MASKED]';
          }
        });
      }
      return masked;
    }
    
    function shouldCapture() {
      return Math.random() < CONFIG.SAMPLING_RATE;
    }
    
    function parseHostHeader(hostHeader, originalHost) {
      // First check for x-original-host header (set by VirtualService)
      if (originalHost) {
        const parts = originalHost.split('.');
        return {
          hostname: originalHost,
          port: 80,
          service: parts[0],
          namespace: parts.length > 1 ? parts[1] : 'default'
        };
      }
      
      if (!hostHeader) return null;
      
      const parts = hostHeader.split(':');
      const hostname = parts[0];
      const port = parts[1] || '80';
      
      if (hostname.endsWith('.local') || hostname.endsWith('.cluster.local')) {
        const serviceParts = hostname.split('.');
        return {
          hostname: hostname,
          port: parseInt(port),
          service: serviceParts[0],
          namespace: serviceParts.length > 2 ? serviceParts[1] : 'default'
        };
      }
      
      return {
        hostname: hostname,
        port: parseInt(port),
        service: hostname,
        namespace: 'external'
      };
    }
    
    function sendToCollector(data) {
      if (!CONFIG.COLLECTOR_URL) return;
      
      const payload = JSON.stringify(data);
      const url = new URL(CONFIG.COLLECTOR_URL);
      
      const options = {
        hostname: url.hostname,
        port: url.port || 80,
        path: url.pathname,
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(payload)
        },
        timeout: 5000
      };
      
      const req = http.request(options, (res) => {
        if (res.statusCode !== 200 && CONFIG.LOG_LEVEL === 'debug') {
          console.error('[Collector] Returned ' + res.statusCode);
        }
      });
      
      req.on('error', (err) => {
        if (CONFIG.LOG_LEVEL === 'debug') {
          console.error('[Collector] Failed to send:', err.message);
        }
      });
      
      req.on('timeout', () => {
        req.destroy();
      });
      
      req.write(payload);
      req.end();
    }
    
    const server = http.createServer((req, res) => {
      const startTime = Date.now();
      
      if (req.url === '/health' || req.url === '/ready') {
        res.writeHead(200);
        res.end('OK');
        return;
      }
      
      const target = parseHostHeader(req.headers.host, req.headers['x-original-host']);
      if (!target) {
        res.writeHead(400, { 'Content-Type': 'text/plain' });
        res.end('Bad Request: Missing Host header');
        return;
      }
      
      const capture = shouldCapture();
      let captureData = null;
      
      if (capture) {
        captureData = {
          timestamp: new Date().toISOString(),
          source: {
            address: req.socket.remoteAddress,
            port: req.socket.remotePort
          },
          destination: {
            hostname: target.hostname,
            port: target.port,
            service: target.service,
            namespace: target.namespace
          },
          request: {
            method: req.method,
            url: req.url,
            headers: maskHeaders(req.headers),
            body: ''
          },
          response: {
            status: null,
            headers: {},
            body: '',
            duration_ms: null
          },
          proxy: {
            node: CONFIG.NODE_NAME,
            pod: CONFIG.POD_NAME,
            namespace: CONFIG.NAMESPACE
          },
          istio_headers: {}
        };
        
        // Capture Istio headers separately
        ISTIO_HEADERS.forEach(header => {
          if (req.headers[header]) {
            captureData.istio_headers[header] = req.headers[header];
          }
        });
      }
      
      let requestBody = '';
      let requestSize = 0;
      
      req.on('data', chunk => {
        if (capture && requestSize < CONFIG.MAX_BODY_SIZE) {
          requestBody += chunk;
          requestSize += chunk.length;
        }
      });
      
      req.on('end', () => {
        if (capture && requestBody) {
          captureData.request.body = maskSensitiveData(requestBody);
          captureData.request.body_truncated = requestSize > CONFIG.MAX_BODY_SIZE;
        }
        
        const proxyOptions = {
          hostname: target.hostname,
          port: target.port,
          path: req.url,
          method: req.method,
          headers: req.headers,
          timeout: 30000
        };
        
        // Remove x-original-host before forwarding
        delete proxyOptions.headers['x-original-host'];
        
        const proxyReq = http.request(proxyOptions, (proxyRes) => {
          if (captureData && capture) {
            captureData.response.status = proxyRes.statusCode;
            captureData.response.headers = maskHeaders(proxyRes.headers);
          }
          
          res.writeHead(proxyRes.statusCode, proxyRes.headers);
          
          let responseBody = '';
          let responseSize = 0;
          
          proxyRes.on('data', chunk => {
            res.write(chunk);
            if (capture && responseSize < CONFIG.MAX_BODY_SIZE) {
              responseBody += chunk;
              responseSize += chunk.length;
            }
          });
          
          proxyRes.on('end', () => {
            res.end();
            
            if (captureData) {
              captureData.response.body = maskSensitiveData(responseBody.toString());
              captureData.response.body_truncated = responseSize > CONFIG.MAX_BODY_SIZE;
              captureData.response.duration_ms = Date.now() - startTime;
              
              // Log locally
              if (CONFIG.LOG_LEVEL === 'info' || CONFIG.LOG_LEVEL === 'debug') {
                console.log('[PROXY_CAPTURE]', JSON.stringify({
                  timestamp: captureData.timestamp,
                  method: captureData.request.method,
                  url: captureData.request.url,
                  target: captureData.destination.hostname,
                  status: captureData.response.status,
                  duration: captureData.response.duration_ms
                }));
              }
              
              // Send to collector
              sendToCollector(captureData);
            }
          });
        });
        
        proxyReq.on('error', (err) => {
          if (CONFIG.LOG_LEVEL === 'info' || CONFIG.LOG_LEVEL === 'debug') {
            console.error('[PROXY_ERROR]', err.message);
          }
          
          if (!res.headersSent) {
            res.writeHead(502, { 'Content-Type': 'text/plain' });
            res.end('Bad Gateway');
          }
        });
        
        proxyReq.on('timeout', () => {
          proxyReq.destroy();
          
          if (!res.headersSent) {
            res.writeHead(504, { 'Content-Type': 'text/plain' });
            res.end('Gateway Timeout');
          }
        });
        
        if (requestBody) {
          proxyReq.write(requestBody);
        }
        proxyReq.end();
      });
    });
    
    const healthServer = http.createServer((req, res) => {
      if (req.url === '/healthz') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ 
          status: 'healthy',
          sampling_rate: CONFIG.SAMPLING_RATE,
          collector_url: CONFIG.COLLECTOR_URL,
          worker_pid: process.pid
        }));
      } else if (req.url === '/metrics') {
        res.writeHead(200, { 'Content-Type': 'text/plain' });
        res.end('# HELP proxy_sampling_rate Current sampling rate\n# TYPE proxy_sampling_rate gauge\nproxy_sampling_rate ' + CONFIG.SAMPLING_RATE + '\n');
      } else {
        res.writeHead(404);
        res.end();
      }
    });
    
    server.listen(CONFIG.PORT, () => {
      console.log('[Worker ' + process.pid + '] Proxy listening on :' + CONFIG.PORT);
    });
    
    healthServer.listen(CONFIG.HEALTH_PORT, () => {
      console.log('[Worker ' + process.pid + '] Health check on :' + CONFIG.HEALTH_PORT);
    });
    
    process.on('SIGTERM', () => {
      console.log('[Worker ' + process.pid + '] Shutting down gracefully...');
      server.close();
      healthServer.close();
    });
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: passthrough-proxy
  namespace: perf-test-app-sbx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: passthrough-proxy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: passthrough-proxy
        sidecar.istio.io/inject: "false"  # NO SIDECAR for proxy
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      containers:
      - name: proxy
        image: node:16-alpine
        command: ["/bin/sh", "-c", "mkdir -p /app && cp /config/server.js /app/server.js && node /app/server.js"]
        env:
        - name: SAMPLING_RATE
          valueFrom:
            configMapKeyRef:
              name: proxy-config
              key: sampling_rate
        - name: COLLECTOR_URL
          valueFrom:
            configMapKeyRef:
              name: proxy-config
              key: collector_url
        - name: MAX_BODY_SIZE
          valueFrom:
            configMapKeyRef:
              name: proxy-config
              key: max_body_size
        - name: MASK_SENSITIVE_DATA
          valueFrom:
            configMapKeyRef:
              name: proxy-config
              key: mask_sensitive_data
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 8080
          name: proxy
        - containerPort: 8081
          name: health
        volumeMounts:
        - name: proxy-code
          mountPath: /config
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: proxy-code
        configMap:
          name: proxy-code
---
apiVersion: v1
kind: Service
metadata:
  name: passthrough-proxy
  namespace: perf-test-app-sbx
spec:
  ports:
  - port: 8080
    targetPort: 8080
    name: proxy
  - port: 8081
    targetPort: 8081
    name: health
  selector:
    app: passthrough-proxy
---
# ServiceAccount for enhanced security
apiVersion: v1
kind: ServiceAccount
metadata:
  name: proxy-sa
  namespace: perf-test-app-sbx
---
# Example application WITH ISTIO SIDECAR
apiVersion: v1
kind: Service
metadata:
  name: example-app
  namespace: perf-test-app-sbx
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: example-app
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: example-app
  namespace: perf-test-app-sbx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: example-app
  template:
    metadata:
      labels:
        app: example-app
        # ISTIO SIDECAR ENABLED for this app
    spec:
      containers:
      - name: app
        image: hashicorp/http-echo:0.2.3
        args:
        - "-text={\"status\":\"success\",\"customer_id\":12345,\"balance\":1500.50,\"ssn\":\"123-45-6789\",\"credit_card\":\"4111-1111-1111-1111\"}"
        - "-listen=:8080"
        resources:
          requests:
            memory: "64Mi"
            cpu: "20m"
          limits:
            memory: "128Mi"
            cpu: "50m"
---
# Test client deployment WITH ISTIO SIDECAR
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-client
  namespace: perf-test-app-sbx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: test-client
  template:
    metadata:
      labels:
        app: test-client
        # ISTIO SIDECAR ENABLED for this app
    spec:
      containers:
      - name: client
        image: nicolaka/netshoot:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          # Create test scripts
          cat > /check-connectivity.sh << 'SCRIPT'
          #!/bin/sh
          echo "=== Connectivity Check ==="
          echo ""
          echo "Checking connectivity to all required endpoints..."
          echo ""
          
          echo -n "1. Proxy Service (passthrough-proxy:8080): "
          if nc -z -w 2 passthrough-proxy 8080 2>/dev/null; then
              echo "✅ Connected"
          else
              echo "❌ Failed"
          fi
          
          echo -n "2. Collector Service (traffic-collector:9000): "
          if nc -z -w 2 traffic-collector 9000 2>/dev/null; then
              echo "✅ Connected"
          else
              echo "❌ Failed"
          fi
          
          echo -n "3. Example App (example-app:80): "
          if nc -z -w 2 example-app 80 2>/dev/null; then
              echo "✅ Connected"
          else
              echo "❌ Failed"
          fi
          
          echo ""
          echo "DNS Resolution:"
          echo -n "4. example-app.perf-test-app-sbx.svc.cluster.local: "
          if nslookup example-app.perf-test-app-sbx.svc.cluster.local >/dev/null 2>&1; then
              echo "✅ Resolved"
          else
              echo "❌ Failed"
          fi
          
          echo ""
          echo "Health Endpoints:"
          echo -n "5. Proxy Health: "
          if wget -qO- http://passthrough-proxy:8081/healthz >/dev/null 2>&1; then
              echo "✅ Healthy"
          else
              echo "❌ Unhealthy"
          fi
          
          echo -n "6. Collector Health: "
          if wget -qO- http://traffic-collector:9000/health >/dev/null 2>&1; then
              echo "✅ Healthy"
          else
              echo "❌ Unhealthy"
          fi
          
          echo ""
          echo "Connectivity check complete!"
          echo ""
          SCRIPT
          
          cat > /test-traffic.sh << 'SCRIPT'
          #!/bin/sh
          echo "=== Generating Test Traffic ==="
          echo ""
          
          echo "Test 1: Direct request to example-app (will be routed through proxy by VirtualService)"
          curl -s http://example-app/api/customer/12345
          echo -e "\n"
          
          echo "Test 2: POST with sensitive data (will be masked)"
          curl -s -X POST \
               -H "Content-Type: application/json" \
               -H "Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9" \
               -d '{"ssn":"987-65-4321","credit_card":"5555-4444-3333-2222","email":"john@example.com","password":"secretpass123"}' \
               http://example-app/api/customer/update
          echo -e "\n"
          
          echo "Test 3: Request with API key (will be masked)"
          curl -s -H "X-API-Key: sk-1234567890abcdef" \
               -H "User-Agent: TestClient/1.0" \
               http://example-app/api/orders?customer=12345
          echo -e "\n"
          
          echo "Traffic generation complete!"
          SCRIPT
          
          cat > /view-captures.sh << 'SCRIPT'
          #!/bin/sh
          echo "=== Viewing Captured Traffic ==="
          echo ""
          echo "Last 10 captures:"
          echo ""
          curl -s http://traffic-collector:9000/query | jq -r '.[] | 
            "[\(.timestamp)] \(.request.method) \(.destination.hostname)\(.request.url) -> \(.response.status) (\(.response.duration_ms)ms)"'
          echo ""
          echo "For full details: curl -s http://traffic-collector:9000/query | jq"
          SCRIPT
          
          cat > /check-masking.sh << 'SCRIPT'
          #!/bin/sh
          echo "=== Checking Data Masking ==="
          echo ""
          curl -s http://traffic-collector:9000/query?limit=1 | jq '.[0] | {
            timestamp: .timestamp,
            url: .request.url,
            auth_header: .request.headers.authorization,
            api_key: .request.headers["x-api-key"],
            request_body: .request.body,
            response_body: .response.body,
            istio_headers: .istio_headers
          }'
          SCRIPT
          
          cat > /view-stats.sh << 'SCRIPT'
          #!/bin/sh
          echo "=== Traffic Statistics ==="
          echo ""
          curl -s http://traffic-collector:9000/stats | jq
          SCRIPT
          
          chmod +x /*.sh
          
          echo "Test client ready. Available commands:"
          echo "  /check-connectivity.sh - Check all endpoint connectivity"
          echo "  /test-traffic.sh       - Generate test traffic"
          echo "  /view-captures.sh      - View captured requests"
          echo "  /check-masking.sh      - Verify data masking"
          echo "  /view-stats.sh         - View traffic statistics"
          echo ""
          
          # Keep container running
          sleep infinity
        resources:
          requests:
            memory: "64Mi"
            cpu: "20m"
          limits:
            memory: "128Mi"
            cpu: "50m"
---
# Wildcard VirtualService for automatic traffic capture
# This captures ALL services in the namespace without per-service configuration
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: wildcard-all-services
  namespace: perf-test-app-sbx
spec:
  hosts:
  # Match all services in the namespace
  - "*.perf-test-app-sbx.svc.cluster.local"
  exportTo:
  - "."  # Only export within this namespace
  gateways:
  - mesh
  http:
  # Route all traffic through the proxy
  - route:
    - destination:
        host: passthrough-proxy.perf-test-app-sbx.svc.cluster.local
        port:
          number: 8080
      headers:
        request:
          set:
            x-original-host: "%REQ(:AUTHORITY)%"
---
# VirtualService for proxy - ensures it can be accessed directly
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: passthrough-proxy-direct
  namespace: perf-test-app-sbx
spec:
  hosts:
  - passthrough-proxy
  - passthrough-proxy.perf-test-app-sbx
  - passthrough-proxy.perf-test-app-sbx.svc
  - passthrough-proxy.perf-test-app-sbx.svc.cluster.local
  http:
  - route:
    - destination:
        host: passthrough-proxy.perf-test-app-sbx.svc.cluster.local
        port:
          number: 8080
---
# VirtualService for collector - ensures it can be accessed directly
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: traffic-collector-direct
  namespace: perf-test-app-sbx
spec:
  hosts:
  - traffic-collector
  - traffic-collector.perf-test-app-sbx
  - traffic-collector.perf-test-app-sbx.svc
  - traffic-collector.perf-test-app-sbx.svc.cluster.local
  http:
  - route:
    - destination:
        host: traffic-collector.perf-test-app-sbx.svc.cluster.local
        port:
          number: 9000
---
# DestinationRule to configure traffic policy for proxy (disable mTLS)
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: passthrough-proxy-dr
  namespace: perf-test-app-sbx
spec:
  host: passthrough-proxy.perf-test-app-sbx.svc.cluster.local
  trafficPolicy:
    tls:
      mode: DISABLE
---
# DestinationRule for traffic-collector (disable mTLS)
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: traffic-collector-dr
  namespace: perf-test-app-sbx
spec:
  host: traffic-collector.perf-test-app-sbx.svc.cluster.local
  trafficPolicy:
    tls:
      mode: DISABLE
---
# Namespace-wide Automatic Routing Configuration Documentation
# This ConfigMap contains documentation about how the wildcard routing works
apiVersion: v1
kind: ConfigMap
metadata:
  name: proxy-routing-config
  namespace: perf-test-app-sbx
data:
  routing.txt: |
    AUTOMATIC NAMESPACE-WIDE TRAFFIC CAPTURE
    
    This namespace uses a wildcard VirtualService to automatically capture ALL traffic.
    No per-service configuration is required - new services are captured automatically.
    
    Key Components:
    1. Wildcard VirtualService (*.perf-test-app-sbx.svc.cluster.local)
       - Captures all service traffic automatically
       - Routes everything through passthrough-proxy
       - Sets x-original-host header for tracking
    
    2. Direct VirtualServices for infrastructure
       - passthrough-proxy-direct: Allows direct access to proxy
       - traffic-collector-direct: Allows direct access to collector
       - Prevents routing loops
    
    3. Service Configuration:
       - Proxy and Collector: NO Istio sidecars (prevent loops)
       - All other services: WITH Istio sidecars (automatic injection)
    
    Traffic Flow:
    1. App A (with sidecar) calls App B
    2. Wildcard VirtualService intercepts the call
    3. Traffic routed to Passthrough Proxy (no sidecar)
    4. Proxy forwards to App B and captures data
    5. Proxy sends capture to Traffic Collector (no sidecar)
    
    IMPORTANT: No manual VirtualService creation needed for new services!
    
    Testing:
    - Deploy any new service in the namespace
    - Make a request to it
    - Check traffic-collector:9000/stats to see it captured
    
    Example wildcard VirtualService:
    
    apiVersion: networking.istio.io/v1beta1
    kind: VirtualService
    metadata:
      name: wildcard-all-services
      namespace: perf-test-app-sbx
    spec:
      hosts:
      - "*.perf-test-app-sbx.svc.cluster.local"
      exportTo:
      - "."
      gateways:
      - mesh
      http:
      - route:
        - destination:
            host: passthrough-proxy.perf-test-app-sbx.svc.cluster.local
            port:
              number: 8080
          headers:
            request:
              set:
                x-original-host: "%REQ(:AUTHORITY)%"